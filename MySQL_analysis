/*1.In each decade, how many schools were there that produced players?*/

SELECT  
  FLOOR(yearID/10)*10 AS decades  
  ,COUNT(DISTINCT schoolID) AS No_of_schools
FROM schools
GROUP BY decades
ORDER BY decades;

/*2. What are the names of the top 5 schools that produced the most players? */

SELECT  
  sd.name_full 
  ,COUNT(DISTINCT s.playerID) as No_of_players
FROM schools s LEFT JOIN school_details sd 
ON s.schoolID = sd.schoolID 
GROUP BY sd.name_full 
ORDER BY No_of_players DESC 
LIMIT 5;

--RESULT: 
University of Texas at Austin	107
University of Southern California	105
Arizona State University	101
Stanford University	86
University of Michigan	76 --

/*3.For each decade, what were the names of the top 3 schools that produced the most players? */

WITH ds AS 
  (SELECT s.schoolID
    ,FLOOR(yearID/10)*10 AS decades 
    ,count(distinct s.playerID) as No_of_players
  FROM schools s LEFT JOIN school_details sd 
  ON s.schoolID = sd.schoolID 
  GROUP BY s.schoolID, decades
  ),
rk AS ( 
  SELECT *, 
    ROW_NUMBER () over (partition by decades order by no_of_players DESC) as ranking
  FROM ds
  )
SELECT
  sd.name_fulL 
  ,r.decades
  ,r.no_of_players
  ,r.ranking 
FROM rk r LEFT JOIN school_details sd 
ON r.schoolID = sd.schoolID 
WHERE ranking <= 3
ORDER BY r.decades, r.ranking

/*4. Return the top 20% of teams in terms of average annual spending. */

WITH total_spend AS (
SELECT 
  teamID
  ,yearID
  ,SUM(salary) AS total_spend_per_year
FROM salaries s 
GROUP BY teamID, yearID
), 		
percentile AS (
SELECT 
  teamID
  ,AVG(total_spend_per_year) AS avg_spend
  ,NTILE(5) OVER (ORDER BY AVG(total_spend_per_year) DESC) AS spend_percentile
FROM total_spend
GROUP BY teamID
)
SELECT teamId
      ,ROUND((avg_spend/1000000),1) AS avg_spend_milions 
FROM percentile
WHERE spend_percentile = 1 
ORDER BY avg_spend DESC

--RESULT: 
teamID |  avg_spend_milions
SFG    |  143.5
LAA    |  118.5
NYA    |  109.4
BOS    |  81.1
LAN    |  74.6
WAS    |  71.5
ARI    |  71.2
PHI    |  66.1 -- 

/*5. For each team, show the cumulative sum of spending over the years. */

WITH total_spend AS (
SELECT teamID
	,yearID
	,SUM(salary) AS total_spend_per_year
FROM salaries s 
GROUP BY teamID, yearID
)
SELECT 	teamID
        ,yearID 
	,ROUND((SUM(total_spend_per_year) OVER (PARTITION BY teamID ORDER BY yearID ASC)/1000000),2) AS cumulative_spend
FROM total_spend

/* 6. Return the first year that each team's cumulative spending surpassed 1 billion. */ 

WITH total_spend AS (
SELECT teamID
	,yearID
        ,SUM(salary) AS total_spend_per_year
FROM salaries s 
GROUP BY teamID, yearID
),
ts AS (
SELECT teamID
	,yearID 
	,ROUND((SUM(total_spend_per_year) OVER (PARTITION BY teamID ORDER BY yearID ASC)/1000000000),2) AS cum_spend_bilions
FROM total_spend
),
ts_bilion AS (
SELECT * FROM ts WHERE cum_spend_bilions >= 1),
ranking AS (
SELECT *,
	RANK() OVER (PARTITION BY teamId ORDER BY yearId ASC) AS ranking
FROM ts_bilion
)
SELECT teamID
      ,yearID
      ,cum_spend_bilions
FROM ranking 
WHERE ranking =1

/* 7. Find the number of players in the table. */

SELECT COUNT(playerID) FROM players 
--RESULT: 18589 --

/* 8.  For each player, calculate their age at their first game, their last game, and their career length (all in years). 

WITH birthday_date AS (
SELECT 
	playerID
        ,namegiven
        ,CAST(CONCAT(birthYear, '-', birthMonth, '-', birthDay) AS DATE) AS birth_date
FROM players
),
debut_date AS (
SELECT 
        playerID
        ,namegiven 
        ,debut 
        ,CASE 
            WHEN debut LIKE '%/%/%' THEN
                CASE
                    WHEN YEAR(STR_TO_DATE(debut, '%m/%d/%y')) > YEAR(CURDATE()) THEN
                        DATE_SUB(STR_TO_DATE(debut, '%m/%d/%y'), INTERVAL 100 YEAR)
                    ELSE
                        STR_TO_DATE(debut, '%m/%d/%y')
                END
            ELSE
                STR_TO_DATE(debut, '%Y-%m-%d')
        END AS parsed_debut_date
FROM players
),
debut_year AS ( 
SELECT playerID, YEAR(parsed_debut_date) AS deb_year FROM debut_date
),
finalgame_date AS (
SELECT 
	 p1.playerID
        ,p1.namegiven
        ,finalgame
        ,CASE 
            WHEN finalgame LIKE '%/%/%' THEN
                CASE
                    WHEN YEAR(STR_TO_DATE(finalgame, '%m/%d/%y')) < dy.deb_year THEN
                        DATE_Add(STR_TO_DATE(finalgame, '%m/%d/%y'), INTERVAL 100 YEAR)
                    ELSE
                        STR_TO_DATE(finalgame, '%m/%d/%y')
                END
            ELSE
                STR_TO_DATE(finalgame, '%Y-%m-%d')
        END AS parsed_finalgame_date
FROM players p1 INNER JOIN debut_year dy 
ON p1.playerID = dy.playerID
),
final AS (
SELECT
	bd.playerID, 
	,bd.namegiven, 
	,bd.birth_date,
	,dd.debut, 
	,dd.parsed_debut_date, 
	,fgd.finalgame, 
	,fgd.parsed_finalgame_date,
	,TIMESTAMPDIFF(YEAR, bd.birth_date, dd.parsed_debut_date) AS debut_age,
	,TIMESTAMPDIFF(YEAR, bd.birth_date, fgd.parsed_finalgame_date) AS finalgame_age,
	,TIMESTAMPDIFF(YEAR, dd.parsed_debut_date, fgd.parsed_finalgame_date) AS career_length
FROM birthday_date bd 
LEFT JOIN debut_date dd 
ON bd.playerID = dd.playerID
LEFT JOIN finalgame_date fgd 
ON bd.playerID = fgd.playerID
),
adjusted_age AS (
SELECT *, 
	CASE WHEN debut_age > 100 THEN debut_age - 100
	ELSE debut_age 
		END AS adjusted_debut_age,
	CASE WHEN finalgame_age > 100 THEN finalgame_age - 100 
	ELSE finalgame_age 
		END AS adjusted_finalgame_age
FROM final)
SELECT namegiven
	,adjusted_debut_age
	,adjusted_finalgame_age
	,adjusted_finalgame_age - adjusted_debut_age AS correct_career_length
FROM adjusted_age 
ORDER BY correct_career_length DESC 

/* 9. Which players have the same birthday? */
WITH bd AS (
SELECT	CAST(CONCAT(birthYear,'-', birthMonth, '-',birthDay) AS DATE) AS birthdate
	,nameGiven
FROM players p)
SELECT 	birthdate
	,GROUP_CONCAT(namegiven) AS name_list
FROM bd
WHERE birthdate IS NOT NULL 
GROUP BY birthdate
HAVING COUNT(namegiven) >= 2
